import re
import scrapy
import hashlib
import cx_Oracle
from locale import *

from customs_stat_monthly.items import (
    CrawlLogItem,
    CustomsStatTable1aItem,
    CustomsStatTable1bItem,
    CustomsStatTable2Item,
    CustomsStatTable3Item,
    CustomsStatTable4Item,
    CustomsStatTable5Item,
    CustomsStatTable6Item,
    CustomsStatTable7Item,
    CustomsStatTable8Item,
    CustomsStatTable9Item,
    CustomsStatTable10Item,
    CustomsStatTable11Item,
    CustomsStatTable12Item,
    CustomsStatTable13Item,
    CustomsStatTable14Item,
    CustomsStatTable15Item,
    CustomsStatTable16Item,
)

setlocale(LC_NUMERIC, 'English_US')


class CsmSpider(scrapy.Spider):
    name = 'csm'
    allowed_domain = ['customs.gov.cn']
    start_urls = [
        'http://www.customs.gov.cn/publish/portal0/tab68101/'
    ]
    tab_names = [
        '(1)进出口商品总值表 A:年度表',
        '(1)进出口商品总值表 B:月度表',
        '(2)进出口商品国别(地区)总值表',
        '(3)进出口商品构成表',
        '(4)进出口商品类章总值表',
        '(5)进出口商品贸易方式总值表',
        '(6)出口商品贸易方式企业性质总值表',
        '(7)进口商品贸易方式企业性质总值表',
        '(8)进出口商品经营单位所在地总值表',
        '(9)进出口商品境内的地/货源地总值表',
        '(10)进出口商品关别总值表',
        '(11)特定地区进出口总值表',
        '(12)外商投资企业进出口总值表',
        '(13)出口主要商品量值表',
        '(14)进口主要商品量值表',
        '(15)对部分国家(地区)出口商品类章金额表',
        '(16)自部分国家(地区)出口商品类章金额表'
    ]
    func_map = None

    def __init__(self, oracle_connstr):
        self.oracle_connstr = oracle_connstr

    @classmethod
    def from_crawler(cls, crawler):
        return cls(
            oracle_connstr=crawler.settings.get('ORACLE_CONNSTR'),
        )

    def parse(self, response):
        #self.conn = cx_Oracle.connect(self.oracle_connstr)
        #self.cursor = self.conn.cursor()

        self.map_parse_func()
        yrs = response.xpath(
            '//*[@id="ess_ctr187729_HtmlModule_lblContent"]'
            '/div/div[2]/span/text()').extract()

        c = re.compile(r'\s*(\d{4})年?\s*', re.M)
        yrs = map(lambda x: c.findall(x)[0],
                  filter(lambda x: c.match(x) is not None, yrs))

        #!!!!!!!!!!!! 查错代码 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        yrs = ['2016']
        #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

        requests = []
        for year in yrs:
            xpath = '//div[@class="tbtj{}_tab"]'.format(year)
            for table in response.xpath(xpath):
                currency = ''
                for i, tr in enumerate(table.xpath('table/tbody/tr')):
                    if i == 0:
                        currency_str = parse_currency(
                            tr.xpath('td[1]/text()').extract()[0])
                        if currency_str is not None:
                            currency = currency_str
                            # print('Currency:', currency)
                        continue
                    tab_str = tr.xpath('td[1]/text()').extract()
                    if tab_str is None or len(tab_str) < 1:
                        continue
                    tab_name = parse_table_name(tab_str[0])
                    # print('Table:', tab_name)
                    if (tab_name is None or
                            tab_name not in self.tab_names):
                        continue

                    #!!!!!!!! 分别测试各个item的功能 !!!!!!!!!!!!!!!!!!!!!
                    if tab_name != self.tab_names[11]:
                        continue
                    #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

                    for a in tr.xpath('td[2]/a'):
                        month = parse_month(a.extract())
                        print(month)
                        if month is None:
                            continue
                        urls = a.xpath('@href').extract()
                        if len(urls) < 1:
                            continue
                        url = response.urljoin(urls[0])
                        # 查重，排除已采集的网址
                        #if self.duplicate_url(url):
                        #    continue

                        if url == 'http://www.customs.gov.cn/publish/portal0/tab49667/info795429.htm':
                            continue

                        print(year, month, currency, url)

                        meta = {}
                        meta['YEAR'] = year
                        meta['MONTH'] = month
                        meta['CURRENCY'] = currency
                        func_name = self.func_map[tab_name]

                        #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                        #print(year, month, currency, url)
                        #!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                        request = scrapy.Request(
                            url, callback=getattr(self, func_name), meta=meta)
                        #print(request)
                        yield request
                        #requests.append(request)

        #for i, request in enumerate(requests):
        #    if i == 14:
        #        continue
        #    print(i, request)
        #    yield request

        #self.cursor.close()
        #self.conn.close()

    def duplicate_url(self, url, cursor):
        command = 'SELECT count(*) FROM DET_CSM_LOG WHERE hid=:1'
        m = hash.md5()
        m.update(url.encode())
        hid = m.hexdigest()
        self.cursor.execute(command, (hid,))
        count = cursor.fetchone()[0]
        if count > 0:
            return True
        else:
            return False

    def map_parse_func(self):
        if self.func_map is not None:
            return
        self.func_map = {}
        base_name = 'parse_table_'
        for i, tab_name in enumerate(self.tab_names):
            if i == 0:
                self.func_map[tab_name] = base_name + '1a'
            elif i == 1:
                self.func_map[tab_name] = base_name + '1b'
            else:
                self.func_map[tab_name] = base_name + str(i)

    def parse_table_1a(self, response):
        '''
        filename = '1a_' + response.url.split("/")[-1]
        with open(filename, 'wb') as f:
            f.write(response.body)
        '''
        fields = {1: 'imp_exp', 2: 'exp', 3: 'imp', 4: 'balance',
                  5: 'yoy_imp_exp', 6: 'yoy_exp', 7: 'yoy_imp'}
        year = response.meta['YEAR']
        month = response.meta['MONTH']
        currency = response.meta['CURRENCY']
        units = ''
        title_name = ''
        xpath = '//*[contains(@style,"BORDER-COLLAPSE: collapse")]/tbody/tr'
        i_header = 0
        i_row = 1
        n_col = 0
        for i, tr in enumerate(response.xpath(xpath)):
            tds = tr.xpath('td').extract()
            n_col = max(n_col, len(tds))
            if i == i_header:
                units = parse_units(tds)
                if units is None:
                    title_name = parse_title_name(tds)
                    i_header -= 1
                elif units == '':
                    i_header += 1
                continue
            elif i == i_header + 1:
                title_name = parse_title_name(tds)
                continue
            elif i == i_header + 2:
                continue
            if check_empty_row(tds, n_col):
                continue

            item = CustomsStatTable1aItem()
            item['report_year'] = year
            item['report_month'] = month
            item['currency'] = currency
            item['units'] = units
            item['title_name'] = title_name
            item['idx'] = i_row
            i_row += 1
            for j, td_html in enumerate(tds):
                td_str = parse_html_tag(td_html, True)
                if j == 0:
                    item['title'] = td_str

                else:
                    item[fields[j]] = parse_value(td_str)
            item['hid'] = self.generate_hid(item)
            yield item

        yield self.generate_log_item(response)

    def parse_table_1b(self, response):
        fields = {1: 'imp_exp', 2: 'exp', 3: 'imp', 4: 'balance',
                  5: 'ytd_imp_exp', 6: 'ytd_exp', 7: 'ytd_imp',
                  8: 'ytd_balance'}
        year = response.meta['YEAR']
        month = response.meta['MONTH']
        currency = response.meta['CURRENCY']
        units = ''
        title_name = ''
        xpath = '//*[contains(@style,"BORDER-COLLAPSE: collapse")]/tbody/tr'
        i_header = 0
        i_row = 1
        n_col = 0
        for i, tr in enumerate(response.xpath(xpath)):
            tds = tr.xpath('td').extract()
            n_col = max(n_col, len(tds))
            if i == i_header:
                units = parse_units(tds)
                if units is None:
                    title_name = parse_title_name(tds)
                    i_header -= 1
                elif units == '':
                    i_header += 1
                continue
            elif i == i_header + 1:
                title_name = parse_title_name(tds)
                continue
            elif i == i_header + 2:
                continue
            if check_empty_row(tds, n_col):
                continue

            item = CustomsStatTable1bItem()
            item['report_year'] = year
            item['report_month'] = month
            item['currency'] = currency
            item['units'] = units
            item['title_name'] = title_name
            item['idx'] = i_row
            i_row += 1
            for j, td_html in enumerate(tds):
                td_str = parse_html_tag(td_html, True)
                if j == 0:
                    item['title'] = td_str
                else:
                    item[fields[j]] = parse_value(td_str)
            item['hid'] = self.generate_hid(item)
            yield item

        yield self.generate_log_item(response)

    def parse_table_2(self, response):
        fields = {1: 'imp_exp', 2: 'ytd_imp_exp', 3: 'exp',
                  4: 'ytd_exp', 5: 'imp', 6: 'ytd_imp',
                  7: 'yoy_ytd_imp_exp', 8: 'yoy_ytd_exp', 9: 'yoy_ytd_imp'}
        year = response.meta['YEAR']
        month = response.meta['MONTH']
        currency = response.meta['CURRENCY']
        units = ''
        title_name = ''
        xpath = '//*[contains(@style,"BORDER-COLLAPSE: collapse")]/tbody/tr'
        i_header = 0
        i_row = 1
        n_col = 0
        for i, tr in enumerate(response.xpath(xpath)):
            tds = tr.xpath('td').extract()
            n_col = max(n_col, len(tds))
            if i == i_header:
                units = parse_units(tds)
                if units is None:
                    title_name = parse_title_name(tds)
                    i_header -= 1
                elif units == '':
                    i_header += 1
                continue
            elif i == i_header + 1:
                title_name = parse_title_name(tds)
                continue
            elif i == i_header + 2:
                continue
            if check_empty_row(tds, n_col):
                continue

            item = CustomsStatTable2Item()
            item['report_year'] = year
            item['report_month'] = month
            item['currency'] = currency
            item['units'] = units
            item['title_name'] = title_name
            item['idx'] = i_row
            i_row += 1
            for j, td_html in enumerate(tds):
                td_str = parse_html_tag(td_html, True)
                if j == 0:
                    item['title'] = td_str
                else:
                    item[fields[j]] = parse_value(td_str)
            item['hid'] = self.generate_hid(item)
            yield item

        yield self.generate_log_item(response)

    def parse_table_3(self, response):
        fields = {1: 'exp', 2: 'ytd_exp', 3: 'imp', 4: 'ytd_imp',
                  5: 'yoy_ytd_exp', 6: 'yoy_ytd_imp'}
        year = response.meta['YEAR']
        month = response.meta['MONTH']
        currency = response.meta['CURRENCY']
        units = ''
        title_name = ''
        xpath = '//*[contains(@style,"BORDER-COLLAPSE: collapse")]/tbody/tr'
        i_header = 0
        i_row = 1
        n_col = 0
        for i, tr in enumerate(response.xpath(xpath)):
            tds = tr.xpath('td').extract()
            n_col = max(n_col, len(tds))
            if i == i_header:
                units = parse_units(tds)
                if units is None:
                    title_name = parse_title_name(tds)
                    i_header -= 1
                elif units == '':
                    i_header += 1
                continue
            elif i == i_header + 1:
                title_name = parse_title_name(tds)
                continue
            elif i == i_header + 2:
                continue
            if check_empty_row(tds, n_col):
                continue

            item = CustomsStatTable3Item()
            item['report_year'] = year
            item['report_month'] = month
            item['currency'] = currency
            item['units'] = units
            item['title_name'] = title_name
            item['idx'] = i_row
            i_row += 1
            for j, td_html in enumerate(tds):
                td_str = parse_html_tag(td_html, True)
                if j == 0:
                    item['title'] = td_str
                else:
                    item[fields[j]] = parse_value(td_str)
            item['hid'] = self.generate_hid(item)
            yield item

        yield self.generate_log_item(response)

    def parse_table_4(self, response):
        fields = {1: 'exp', 2: 'ytd_exp', 3: 'imp', 4: 'ytd_imp',
                  5: 'yoy_ytd_exp', 6: 'yoy_ytd_imp'}
        year = response.meta['YEAR']
        month = response.meta['MONTH']
        currency = response.meta['CURRENCY']
        units = ''
        title_name = ''
        xpath = '//*[contains(@style,"BORDER-COLLAPSE: collapse")]/tbody/tr'
        i_header = 0
        i_row = 1
        n_col = 0
        for i, tr in enumerate(response.xpath(xpath)):
            tds = tr.xpath('td').extract()
            n_col = max(n_col, len(tds))
            if i == i_header:
                units = parse_units(tds)
                if units is None:
                    title_name = parse_title_name(tds)
                    i_header -= 1
                elif units == '':
                    i_header += 1
                continue
            elif i == i_header + 1:
                title_name = parse_title_name(tds)
                continue
            elif i == i_header + 2:
                continue
            if check_empty_row(tds, n_col):
                continue

            item = CustomsStatTable4Item()
            item['report_year'] = year
            item['report_month'] = month
            item['currency'] = currency
            item['units'] = units
            item['title_name'] = title_name
            item['idx'] = i_row
            i_row += 1
            for j, td_html in enumerate(tds):
                td_str = parse_html_tag(td_html, True)
                if j == 0:
                    item['title'] = td_str
                else:
                    item[fields[j]] = parse_value(td_str)
            item['hid'] = self.generate_hid(item)
            yield item

        yield self.generate_log_item(response)

    def parse_table_5(self, response):
        fields1 = {1: 'imp_exp', 2: 'ytd_imp_exp', 3: 'exp',
                   4: 'ytd_exp', 5: 'imp', 6: 'ytd_imp'}
        fields2 = {0: 'yoy_imp_exp', 1: 'yoy_ytd_imp_exp', 2: 'yoy_exp',
                   3: 'yoy_ytd_exp', 4: 'yoy_imp', 5: 'yoy_ytd_imp'}
        year = response.meta['YEAR']
        month = response.meta['MONTH']
        currency = response.meta['CURRENCY']
        units = ''
        title_name = ''
        xpath = '//*[contains(@style,"BORDER-COLLAPSE: collapse")]/tbody/tr'
        i_header = 0
        i_row = 1
        n_col = 0
        for i, tr in enumerate(response.xpath(xpath)):
            tds = tr.xpath('td').extract()
            n_col = max(n_col, len(tds))
            if i == i_header:
                units = parse_units(tds)
                if units is None:
                    title_name = parse_title_name(tds)
                    i_header -= 1
                elif units == '':
                    i_header += 1
                continue
            elif i == i_header + 1:
                title_name = parse_title_name(tds)
                continue
            elif i == i_header + 2:
                continue
            if check_empty_row(tds, n_col):
                continue

            if (i - i_header) % 2 == 1:
                item = CustomsStatTable5Item()
                item['report_year'] = year
                item['report_month'] = month
                item['currency'] = currency
                item['units'] = units
                item['title_name'] = title_name
                item['idx'] = i_row
                i_row += 1
                for j, td_html in enumerate(tds):
                    td_str = parse_html_tag(td_html, True)
                    if j == 0:
                        item['title'] = td_str
                    else:
                        item[fields1[j]] = parse_value(td_str)
            else:
                offset = int(check_empty_str(parse_html_tag(tds[0])))
                for j, td_html in enumerate(tds):
                    td_str = parse_html_tag(td_html, True)
                    item[fields2[j - offset]] = parse_value(td_str)
                item['hid'] = self.generate_hid(item)
                yield item

        yield self.generate_log_item(response)

    def parse_table_6(self, response):
        fields1 = {1: 'sum_val', 2: 'soe_val', 3: 'fie_subtotal_val',
                   4: 'fie_ce_val', 5: 'fie_jv_val', 6: 'fie_foe_val',
                   7: 'pe_val', 8: 'other_val'}
        fields2 = {0: 'sum_yoy', 1: 'soe_yoy', 2: 'fie_subtotal_yoy',
                   3: 'fie_ce_yoy', 4: 'fie_jv_yoy', 5: 'fie_foe_yoy',
                   6: 'pe_yoy', 7: 'other_yoy'}

        year = response.meta['YEAR']
        month = response.meta['MONTH']
        currency = response.meta['CURRENCY']
        units = ''
        title_name = ''
        xpath = '//*[contains(@style,"BORDER-COLLAPSE: collapse")]/tbody/tr'
        i_header = 0
        i_row = 1
        n_col = 0
        for i, tr in enumerate(response.xpath(xpath)):
            tds = tr.xpath('td').extract()
            n_col = max(n_col, len(tds))
            if i == i_header:
                units = parse_units(tds)
                if units is None:
                    title_name = parse_title_name(tds)
                    i_header -= 1
                elif units == '':
                    i_header += 1
                continue
            elif i == i_header + 1:
                title_name = parse_title_name(tds)
                continue
            elif i == i_header + 2 or i == i_header + 3:
                continue
            if check_empty_row(tds, n_col):
                continue

            if (i - i_header) % 2 == 0:
                item = CustomsStatTable6Item()
                item['report_year'] = year
                item['report_month'] = month
                item['currency'] = currency
                item['units'] = units
                item['title_name'] = title_name
                item['idx'] = i_row
                i_row += 1
                for j, td_html in enumerate(tds):
                    td_str = parse_html_tag(td_html, True)
                    if j == 0:
                        item['title'] = td_str
                    else:
                        item[fields1[j]] = parse_value(td_str)
            else:
                offset = int(check_empty_str(parse_html_tag(tds[0])))
                for j, td_html in enumerate(tds):
                    td_str = parse_html_tag(td_html, True)
                    item[fields2[j - offset]] = parse_value(td_str)
                item['hid'] = self.generate_hid(item)
                yield item

        yield self.generate_log_item(response)

    def parse_table_7(self, response):
        fields1 = {1: 'sum_val', 2: 'soe_val', 3: 'fie_subtotal_val',
                   4: 'fie_ce_val', 5: 'fie_jv_val', 6: 'fie_foe_val',
                   7: 'pe_val', 8: 'other_val'}
        fields2 = {0: 'sum_yoy', 1: 'soe_yoy', 2: 'fie_subtotal_yoy',
                   3: 'fie_ce_yoy', 4: 'fie_jv_yoy', 5: 'fie_foe_yoy',
                   6: 'pe_yoy', 7: 'other_yoy'}

        year = response.meta['YEAR']
        month = response.meta['MONTH']
        currency = response.meta['CURRENCY']
        units = ''
        title_name = ''
        xpath = '//*[contains(@style,"BORDER-COLLAPSE: collapse")]/tbody/tr'
        i_header = 0
        i_row = 1
        n_col = 0
        for i, tr in enumerate(response.xpath(xpath)):
            tds = tr.xpath('td').extract()
            n_col = max(n_col, len(tds))
            if i == i_header:
                units = parse_units(tds)
                if units is None:
                    title_name = parse_title_name(tds)
                    i_header -= 1
                if units == '':
                    i_header += 1
                continue
            elif i == i_header + 1:
                title_name = parse_title_name(tds)
                continue
            elif i == i_header + 2 or i == i_header + 3:
                continue
            if check_empty_row(tds, n_col):
                continue

            if (i - i_header) % 2 == 0:
                item = CustomsStatTable7Item()
                item['report_year'] = year
                item['report_month'] = month
                item['currency'] = currency
                item['units'] = units
                item['title_name'] = title_name
                item['idx'] = i_row
                i_row += 1
                for j, td_html in enumerate(tds):
                    td_str = parse_html_tag(td_html, True)
                    if j == 0:
                        item['title'] = td_str
                    else:
                        item[fields1[j]] = parse_value(td_str)
            else:
                offset = int(check_empty_str(parse_html_tag(tds[0])))
                for j, td_html in enumerate(tds):
                    td_str = parse_html_tag(td_html, True)
                    item[fields2[j - offset]] = parse_value(td_str)
                item['hid'] = self.generate_hid(item)
                yield item

        yield self.generate_log_item(response)

    def parse_table_8(self, response):
        fields = {1: 'imp_exp', 2: 'ytd_imp_exp', 3: 'exp',
                  4: 'ytd_exp', 5: 'imp', 6: 'ytd_imp',
                  7: 'yoy_ytd_imp_exp', 8: 'yoy_ytd_exp', 9: 'yoy_ytd_imp'}
        year = response.meta['YEAR']
        month = response.meta['MONTH']
        currency = response.meta['CURRENCY']
        units = ''
        title_name = ''
        xpath = '//*[contains(@style,"BORDER-COLLAPSE: collapse")]/tbody/tr'
        i_header = 0
        i_row = 1
        n_col = 0
        for i, tr in enumerate(response.xpath(xpath)):
            tds = tr.xpath('td').extract()
            n_col = max(n_col, len(tds))
            if i == i_header:
                units = parse_units(tds)
                if units is None:
                    title_name = parse_title_name(tds)
                    i_header -= 1
                elif units == '':
                    i_header += 1
                continue
            elif i == i_header + 1:
                title_name = parse_title_name(tds)
                continue
            elif i == i_header + 2:
                continue
            if check_empty_row(tds, n_col):
                continue

            item = CustomsStatTable8Item()
            item['report_year'] = year
            item['report_month'] = month
            item['currency'] = currency
            item['units'] = units
            item['title_name'] = title_name
            item['idx'] = i_row
            i_row += 1
            for j, td_html in enumerate(tds):
                td_str = parse_html_tag(td_html, True)
                if j == 0:
                    item['title'] = td_str
                else:
                    item[fields[j]] = parse_value(td_str)
            item['hid'] = self.generate_hid(item)
            yield item

        yield self.generate_log_item(response)

    def parse_table_9(self, response):
        fields = {1: 'imp_exp', 2: 'ytd_imp_exp', 3: 'exp',
                  4: 'ytd_exp', 5: 'imp', 6: 'ytd_imp',
                  7: 'yoy_ytd_imp_exp', 8: 'yoy_ytd_exp', 9: 'yoy_ytd_imp'}
        year = response.meta['YEAR']
        month = response.meta['MONTH']
        currency = response.meta['CURRENCY']
        units = ''
        title_name = ''
        xpath = '//*[contains(@style,"BORDER-COLLAPSE: collapse")]/tbody/tr'
        i_header = 0
        i_row = 1
        n_col = 0
        for i, tr in enumerate(response.xpath(xpath)):
            tds = tr.xpath('td').extract()
            n_col = max(n_col, len(tds))
            if i == i_header:
                units = parse_units(tds)
                if units is None:
                    title_name = parse_title_name(tds)
                    i_header -= 1
                elif units == '':
                    i_header += 1
                continue
            elif i == i_header + 1:
                title_name = parse_title_name(tds)
                continue
            elif i == i_header + 2:
                continue
            if check_empty_row(tds, n_col):
                continue

            item = CustomsStatTable9Item()
            item['report_year'] = year
            item['report_month'] = month
            item['currency'] = currency
            item['units'] = units
            item['title_name'] = title_name
            item['idx'] = i_row
            i_row += 1
            for j, td_html in enumerate(tds):
                td_str = parse_html_tag(td_html, True)
                if j == 0:
                    item['title'] = td_str
                else:
                    item[fields[j]] = parse_value(td_str)
            item['hid'] = self.generate_hid(item)
            yield item

        yield self.generate_log_item(response)

    def parse_table_10(self, response):
        fields = {1: 'imp_exp', 2: 'ytd_imp_exp', 3: 'exp',
                  4: 'ytd_exp', 5: 'imp', 6: 'ytd_imp',
                  7: 'yoy_ytd_imp_exp', 8: 'yoy_ytd_exp', 9: 'yoy_ytd_imp'}
        year = response.meta['YEAR']
        month = response.meta['MONTH']
        currency = response.meta['CURRENCY']
        units = ''
        title_name = ''
        xpath = '//*[contains(@style,"BORDER-COLLAPSE: collapse")]/tbody/tr'
        i_header = 0
        i_row = 1
        n_col = 0
        for i, tr in enumerate(response.xpath(xpath)):
            tds = tr.xpath('td').extract()
            n_col = max(n_col, len(tds))
            if i == i_header:
                units = parse_units(tds)
                if units is None:
                    title_name = parse_title_name(tds)
                    i_header -= 1
                elif units == '':
                    i_header += 1
                continue
            elif i == i_header + 1:
                title_name = parse_title_name(tds)
                continue
            elif i == i_header + 2:
                continue
            if check_empty_row(tds, n_col):
                continue

            item = CustomsStatTable10Item()
            item['report_year'] = year
            item['report_month'] = month
            item['currency'] = currency
            item['units'] = units
            item['title_name'] = title_name
            item['idx'] = i_row
            i_row += 1
            for j, td_html in enumerate(tds):
                td_str = parse_html_tag(td_html, True)
                if j == 0:
                    item['title'] = td_str
                else:
                    item[fields[j]] = parse_value(td_str)
            item['hid'] = self.generate_hid(item)
            yield item

        yield self.generate_log_item(response)

    def parse_table_11(self, response):
        #if response.url == 'http://www.customs.gov.cn/publish/portal0/tab49667/info799667.htm':
        return self.generate_log_item(response)

        fields = {1: 'imp_exp', 2: 'ytd_imp_exp', 3: 'exp',
                  4: 'ytd_exp', 5: 'imp', 6: 'ytd_imp',
                  7: 'yoy_ytd_imp_exp', 8: 'yoy_ytd_exp', 9: 'yoy_ytd_imp'}
        year = response.meta['YEAR']
        month = response.meta['MONTH']
        currency = response.meta['CURRENCY']
        units = ''
        title_name = ''
        xpath = '//*[contains(@style,"BORDER-COLLAPSE: collapse")]/tbody/tr'
        i_header = 0
        i_row = 1
        n_col = 0
        for i, tr in enumerate(response.xpath(xpath)):
            tds = tr.xpath('td').extract()
            n_col = max(n_col, len(tds))
            if i == i_header:
                units = parse_units(tds)
                if units is None:
                    title_name = parse_title_name(tds)
                    i_header -= 1
                elif units == '':
                    i_header += 1
                continue
            elif i == i_header + 1:
                title_name = parse_title_name(tds)
                continue
            elif i == i_header + 2:
                continue
            if check_empty_row(tds, n_col):
                continue

            item = CustomsStatTable11Item()
            item['report_year'] = year
            item['report_month'] = month
            item['currency'] = currency
            item['units'] = units
            item['title_name'] = title_name
            item['idx'] = i_row
            i_row += 1
            for j, td_html in enumerate(tds):
                td_str = parse_html_tag(td_html, True)
                if j == 0:
                    item['title'] = td_str
                else:
                    item[fields[j]] = parse_value(td_str)
            item['hid'] = self.generate_hid(item)
            yield item

        yield self.generate_log_item(response)

    def parse_table_12(self, response):
        fields = {1: 'imp_exp', 2: 'ytd_imp_exp', 3: 'exp',
                  4: 'ytd_exp', 5: 'imp', 6: 'ytd_imp',
                  7: 'yoy_ytd_imp_exp', 8: 'yoy_ytd_exp', 9: 'yoy_ytd_imp'}
        year = response.meta['YEAR']
        month = response.meta['MONTH']
        currency = response.meta['CURRENCY']
        units = ''
        title_name = ''
        xpath = '//*[contains(@style,"BORDER-COLLAPSE: collapse")]/tbody/tr'
        i_header = 0
        i_row = 1
        n_col = 0
        for i, tr in enumerate(response.xpath(xpath)):
            tds = tr.xpath('td').extract()
            n_col = max(n_col, len(tds))
            if i == i_header:
                units = parse_units(tds)
                if units is None:
                    title_name = parse_title_name(tds)
                    i_header -= 1
                elif units == '':
                    i_header += 1
                continue
            elif i == i_header + 1:
                title_name = parse_title_name(tds)
                continue
            elif i == i_header + 2:
                continue
            if check_empty_row(tds, n_col):
                continue

            item = CustomsStatTable12Item()
            item['report_year'] = year
            item['report_month'] = month
            item['currency'] = currency
            item['units'] = units
            item['title_name'] = title_name
            item['idx'] = i_row
            i_row += 1
            c = re.compile(r'.+[计省市区]$')
            for j, td_html in enumerate(tds):
                td_str = parse_html_tag(td_html, True)
                if j == 0:
                    if c.match(td_str) is not None:
                        province = td_str
                        item['title'] = td_str
                        item['province'] = td_str
                    else:
                        item['title'] = td_str
                        item['province'] = province
                else:
                    item[fields[j]] = parse_value(td_str)
            item['hid'] = self.generate_hid(item)
            yield item

        yield self.generate_log_item(response)

    def parse_table_13(self, response):
        fields = {2: 'quantity', 3: 'amount', 4: 'quantity_ytd',
                  5: 'amount_ytd', 6: 'quantity_yoy', 7: 'amount_yoy',
                  8: 'quantity_ytd_yoy', 9: 'amount_ytd_yoy'}
        year = response.meta['YEAR']
        month = response.meta['MONTH']
        currency = response.meta['CURRENCY']
        units = ''
        title_name = ''
        xpath = '//*[contains(@style,"BORDER-COLLAPSE: collapse")]/tbody/tr'
        i_header = 0
        i_row = 1
        n_col = 0
        for i, tr in enumerate(response.xpath(xpath)):
            tds = tr.xpath('td').extract()
            n_col = max(n_col, len(tds))
            if i == i_header:
                units = parse_units(tds)
                if units is None:
                    title_name = parse_title_name(tds)
                    i_header -= 1
                elif units == '':
                    i_header += 1
                continue
            elif i == i_header + 1:
                title_name = parse_title_name(tds)
                continue
            elif i == i_header + 2:
                continue
            if check_empty_row(tds, n_col):
                continue

            c = re.compile(r'\s*其中：?')
            if c.match(parse_html_tag(tds[0], True)) is not None:
                continue

            item = CustomsStatTable13Item()
            item['report_year'] = year
            item['report_month'] = month
            item['currency'] = currency
            item['units'] = units
            item['title_name'] = title_name
            item['idx'] = i_row
            i_row += 1
            for j, td_html in enumerate(tds):
                td_str = parse_html_tag(td_html, True)
                if j == 0:
                    item['title'] = td_str
                elif j == 1:
                    item['measurement_units'] = td_str
                else:
                    item[fields[j]] = parse_value(td_str)
            item['hid'] = self.generate_hid(item)
            yield item

        yield self.generate_log_item(response)

    def parse_table_14(self, response):
        fields = {2: 'quantity', 3: 'amount', 4: 'quantity_ytd',
                  5: 'amount_ytd', 6: 'quantity_yoy', 7: 'amount_yoy',
                  8: 'quantity_ytd_yoy', 9: 'amount_ytd_yoy'}
        year = response.meta['YEAR']
        month = response.meta['MONTH']
        currency = response.meta['CURRENCY']
        units = ''
        title_name = ''
        xpath = '//*[contains(@style,"BORDER-COLLAPSE: collapse")]/tbody/tr'
        i_header = 0
        i_row = 1
        n_col = 0
        for i, tr in enumerate(response.xpath(xpath)):
            tds = tr.xpath('td').extract()
            n_col = max(n_col, len(tds))
            if i == i_header:
                units = parse_units(tds)
                if units is None:
                    title_name = parse_title_name(tds)
                    i_header -= 1
                elif units == '':
                    i_header += 1
                continue
            elif i == i_header + 1:
                title_name = parse_title_name(tds)
                continue
            elif i == i_header + 2:
                continue
            if check_empty_row(tds, n_col):
                continue

            c = re.compile(r'\s*其中：?')
            if c.match(parse_html_tag(tds[0], True)) is not None:
                continue

            item = CustomsStatTable14Item()
            item['report_year'] = year
            item['report_month'] = month
            item['currency'] = currency
            item['units'] = units
            item['title_name'] = title_name
            item['idx'] = i_row
            i_row += 1
            for j, td_html in enumerate(tds):
                td_str = parse_html_tag(td_html, True)
                if j == 0:
                    item['title'] = td_str
                elif j == 1:
                    item['measurement_units'] = td_str
                else:
                    item[fields[j]] = parse_value(td_str)
            item['hid'] = self.generate_hid(item)
            yield item

        yield self.generate_log_item(response)

    def parse_table_15(self, response):
        fields = {1: 'amount', 0: 'amount_ytd'}
        year = response.meta['YEAR']
        month = response.meta['MONTH']
        currency = response.meta['CURRENCY']
        units = ''
        title_name = ''
        areas = []
        xpath = '//*[contains(@style,"BORDER-COLLAPSE: collapse")]/tbody/tr'
        i_header = 0
        i_row = 0
        n_col = 0
        for i, tr in enumerate(response.xpath(xpath)):
            tds = tr.xpath('td').extract()
            n_col = max(n_col, len(tds))
            if i == i_header:
                units = parse_units(tds)
                if units is None:
                    title_name = parse_title_name(tds)
                    areas = parse_all_title(tds)
                    i_header -= 1
                elif units == '':
                    i_header += 1
                continue
            elif i == i_header + 1:
                title_name = parse_title_name(tds)
                areas = parse_all_title(tds)
                continue
            elif i == i_header + 2:
                continue
            if check_empty_row(tds, n_col):
                continue

            title = ''
            i_row += 1
            for j, td_html in enumerate(tds):
                td_str = parse_html_tag(td_html, True)
                if j == 0:
                    title = td_str
                elif j % 2 == 1:
                    item = CustomsStatTable15Item()
                    item['report_year'] = year
                    item['report_month'] = month
                    item['currency'] = currency
                    item['units'] = units
                    item['title'] = title
                    item['title_name'] = title_name
                    item['idx'] = i_row
                    item['area'] = areas[j // 2]
                    item[fields[1]] = parse_value(td_str)
                else:
                    item[fields[0]] = parse_value(td_str)
                    item['hid'] = self.generate_hid(item)
                    yield item

        yield self.generate_log_item(response)

    def parse_table_16(self, response):
        fields = {1: 'amount', 0: 'amount_ytd'}
        year = response.meta['YEAR']
        month = response.meta['MONTH']
        currency = response.meta['CURRENCY']
        units = ''
        title_name = ''
        areas = None
        xpath = '//*[contains(@style,"BORDER-COLLAPSE: collapse")]/tbody/tr'
        i_header = 0
        i_row = 0
        n_col = 0
        for i, tr in enumerate(response.xpath(xpath)):
            tds = tr.xpath('td').extract()
            n_col = max(n_col, len(tds))
            if i == i_header:
                units = parse_units(tds)
                if units is None:
                    title_name = parse_title_name(tds)
                    areas = parse_all_title(tds)
                    i_header -= 1
                elif units == '':
                    i_header += 1
                continue
            elif i == i_header + 1:
                title_name = parse_title_name(tds)
                areas = parse_all_title(tds)
                continue
            elif i == i_header + 2:
                continue
            if check_empty_row(tds, n_col):
                continue

            title = ''
            i_row += 1
            for j, td_html in enumerate(tds):
                td_str = parse_html_tag(td_html, True)
                if j == 0:
                    title = td_str
                elif j % 2 == 1:
                    item = CustomsStatTable16Item()
                    item['report_year'] = year
                    item['report_month'] = month
                    item['currency'] = currency
                    item['units'] = units
                    item['title'] = title
                    item['title_name'] = title_name
                    item['idx'] = i_row
                    item['area'] = areas[j // 2]
                    item[fields[1]] = parse_value(td_str)
                else:
                    item[fields[0]] = parse_value(td_str)
                    item['hid'] = self.generate_hid(item)
                    yield item

        yield self.generate_log_item(response)

    def generate_hid(self, item):
        keys = list(item.fields.keys())
        try:
            keys.remove('hid')
        except ValueError:
            pass
        keys.sort()

        m = hashlib.md5()
        str_type = type('')
        hash_strs = []
        for key in keys:
            if item[key] is None:
                hash_strs.append('-')
            elif isinstance(item[key], str_type):
                hash_strs.append(item[key])
            else:
                hash_strs.append(str(item[key]))
        hash_str = '|'.join(hash_strs)
        m.update(hash_str.encode())
        hid = m.hexdigest()
        return hid

    def generate_log_item(self, response):
        m = hashlib.md5()
        m.update(response.url.encode())
        hid = m.hexdigest()
        item = CrawlLogItem()
        item['url'] = response.url
        item['hid'] = hid
        return item


def parse_table_name(s):
    c = re.compile(r'[\(（]\d+[\)）](\d{4}年?).+')
    m = c.search(s)
    if m is None:
        return s
    return s.replace(m.group(1), '')


def parse_currency(s):
    c = re.compile(r'[\(（](.+)[\)）]')
    m = c.search(s)
    if m is None:
        return None
    return m.group(1).replace(' ', '')


def parse_month(s):
    s = parse_html_tag(s)
    c = re.compile(r'(\d{1,2})月?')
    m = c.search(s)
    if m is None:
        return None
    return m.group(1)


def parse_html_tag(s, parse_all=False):
    c = re.compile(
        r'<(?P<tag>[0-9A-Za-z_]+)\s?.*?>\s*(?P<value>.*?)\s*</(?P=tag)>')
    s1 = s.replace('\r\n', ' ').replace('\r', ' ').replace('\n', ' ')
    m = c.search(s1)
    if m is None:
        return s
    elif parse_all:
        return parse_html_tag(m.group('value'), True)
    else:
        return m.group('value').strip()


def parse_units(tds):
    if len(tds) == 0:
        return ''

    units_html = tds[-1]
    units_str = parse_html_tag(units_html, True)
    if units_str == '':
        return ''

    c = re.compile(r'^\s*单位[：:](.+)')
    m = c.match(units_str)
    if m is None:
        return None

    units = m.group(1).strip()
    return units


def parse_title_name(tds):
    if len(tds) == 0:
        return ''

    title_html = tds[0]
    title_name = parse_html_tag(title_html, True)
    title_name = title_name.strip()
    title_name = title_name.replace('\xa0', ' ')
    return title_name


def parse_all_title(tds):
    titles = []
    if len(tds) < 2:
        return None

    titles = [parse_html_tag(td, True) for td in tds[1:]]
    return titles


def parse_value(s):
    if s.strip() == '-':
        return None
    elif s.find('#') >= 0:
        return None
    else:
        return atof(s)


def check_empty_row(tds, n_col):
    ''' 检查是否为空行，包括tr为None，tr中没有td，首td字段为空三种情况
    '''
    if len(tds) <= 0 or len(tds) < n_col // 2:
        return True
    header = parse_html_tag(tds[0], True)
    if check_empty_str(header):
        return True
    elif header == '-':
        return True

    count = 0
    for i, td in enumerate(tds):
        if i == 0:
            continue
        if check_empty_str(parse_html_tag(tds[i], True)):
            count += 1
    if count == len(tds) - 1:
        return True

    return False


def check_empty_str(s):
    if s is None:
        return True
    s = s.strip()
    if s == '':
        return True
    elif s.startswith('\u3000'):
        return True
    elif s.startswith('\xa0'):
        return True
    elif s.startswith('<br>'):
        return True
    else:
        return False
